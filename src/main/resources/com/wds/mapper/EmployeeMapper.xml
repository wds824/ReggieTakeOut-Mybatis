<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.wds.mapper.EmployeeMapper">

    <resultMap id="employee" type="com.wds.entity.Employee">
        <result column="id_number" property="idNumber"/>
        <result column="create_time" property="createTime"/>
        <result column="create_user" property="createUser"/>
        <result column="update_time" property="updateTime"/>
        <result column="update_user" property="updateUser"/>
    </resultMap>

    <insert id="save">
        insert into employee(id, name, username, password, phone, sex, id_number, create_time, update_time, create_user,
                             update_user)
        VALUES (#{id}, #{name}, #{username}, #{password}, #{phone}, #{sex}, #{idNumber}, #{createTime}, #{updateTime},
                #{createUser}, #{updateUser})
    </insert>

    <update id="updateById">
        update employee
        <set>
            <if test="username != null">
                username = #{username},
            </if>
            <if test="name != null">
                name = #{name},
            </if>
            <if test="phone != null">
                phone = #{phone},
            </if>
            <if test="sex != null">
                sex = #{sex},
            </if>
            <if test="updateTime !=null">
                update_time = #{updateTime},
            </if>
            <if test="status != null">
                status = #{status},
            </if>
        </set>
        where id = #{id}

    </update>

    <select id="getAll" resultMap="employee">
        select *
        from employee
    </select>

    <select id="getById" resultMap="employee">
        select *
        from employee
        where id = #{id}
    </select>

    <select id="login" resultMap="employee">
        select *
        from employee
        where username = #{username}
          and password = #{password}
    </select>

    <select id="getPage" resultMap="employee">
        select *
        from employee
        <where>
            <if test="name != null">
                name like #{name}
            </if>
        </where>
        order by update_time desc
        limit #{page},#{pageSize}
    </select>

    <select id="getCount" resultType="integer">
        select count(id)
        from employee
        <where>
            <if test="name != null">
                name like #{name}
            </if>
            and status = 1
        </where>
    </select>


</mapper>